#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extbook
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Notes on Intel x86 Assembly Language"
\pdf_author "Joshua Saunders"
\pdf_subject "assembly language, intel, x86"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 2
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Basic Concepts
\end_layout

\begin_layout Section
Welcome to Assembly Language
\end_layout

\begin_layout Subsection
Terms and Definitions
\end_layout

\begin_layout Itemize

\emph on
assembler
\emph default
: utility program that converts source code into machine language.
 Assembly language is not portable because it's designed to run on a family
 of processors
\end_layout

\begin_layout Itemize

\emph on
linker
\emph default
: utility program that combines individual files created by an assembler
 into a single executable
\end_layout

\begin_layout Itemize

\emph on
machine language
\emph default
: numeric language understood by the CPU
\end_layout

\begin_layout Itemize

\emph on
assembly language
\emph default
: statements written with short mnemonics (e.g., ADD, MOV, SUB, etc.).
 Has a one-to-one relationship with machine language
\end_layout

\begin_layout Itemize

\emph on
portable
\emph default
: run on a wide variety of computer systems
\end_layout

\begin_layout Itemize

\emph on
one-to-one
\emph default
: each instruction in one language corresponds to another instruction in
 another language
\end_layout

\begin_layout Section
Virtual Machine Concept
\end_layout

\begin_layout Standard
Programs can be written in a computer's native machine language, but this
 is difficult for programmers because it is entirely numerical (e.g., binary
 or hexadecimal) and very detailed.
 Let's call the machine language 
\series bold
L0
\series default
.
 Therefore, a new language, 
\series bold
L1
\series default
, can be made such that it's easier for programmers to write programs in.
 This can be accomplished by interpreting L1 into L0 or by translating L1
 into L0.
\end_layout

\begin_layout Subsection
Virtual Machines
\end_layout

\begin_layout Standard
It can be helpful to think in terms of a hypothetical computer (virtual
 machine) instead of thinking in terms of languages.
 In this line of thinking, a virtual machine 
\series bold
V1
\series default
 executes programs written in L1 and a virtual machine 
\series bold
V0
\series default
 executes programs written in L0.
\end_layout

\begin_layout Standard
Virtual machines can be constructed of hardware or software and programs
 can be written for VM1 which can be executed on hardware if it's practical
 to make V1
\backslash
 as a physical computer.
 Or, programs can be written for VM1 can be translated/interpreted from
 VM1 and executed on VM0.
\end_layout

\begin_layout Standard
VM1 and VM0 cannot be too different otherwise the translation/interpretation
 process would be time consuming.
 If L1 is not practical enough for programmers, then more virtual machines
 can be made and chained together until a practical, yet powerful, enough
 language is constructed.
 This is, for example, how Java works.
\end_layout

\begin_layout Standard
Java is based on the virtual machine concept and is translated from Java
 into Java byte code by the Java compiler.
 Java bye code is a low-level language that's quickly executed at runtime
 by the Java virtual machine which has been implemented on many different
 computer systems which makes Java portable.
\end_layout

\begin_layout Subsubsection
Specific Machines
\end_layout

\begin_layout Standard
Instead of using VM1 and VM2, let's use levels such that 
\series bold
Level 2
\series default
 corresponds to VM2, 
\series bold
Level 1
\series default
 corresponds to VM1, and so on.
 Level 1 will be the computer's digital logic hardware.
\end_layout

\begin_layout Itemize

\emph on
Instruction Set Architecture (Level 2)
\emph default
: instruction set to carry out basic operations (move, add, multiply) which
 is also known as machine language.
 Each instruction is executed directly by the computer's hardware or by
 a program embedded in microprocessor called a microprogram.
\end_layout

\begin_layout Itemize

\emph on
Assembly Language (Level 3)
\emph default
: Assembly language uses short mnemonics such as ADD, MOV, or SUB which
 are translated to the ISA level.
 Assembly language programs are entirely translated to machine language
 before they are executed.
\end_layout

\begin_layout Itemize

\emph on
High-Level Languages (Level 4)
\emph default
: Programs at level 4 are translated into
\backslash
 assembly language instructions.
 Examples of languages at this level are Java, C++, and C.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:virtual-machine-level"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows how the levels of virtual machines are chained together.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename virtual_machine_levels.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Virtual machine level
\begin_inset CommandInset label
LatexCommand label
name "fig:virtual-machine-level"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Terms and Definitions
\end_layout

\begin_layout Itemize

\emph on
virtual machine
\emph default
: software program that emulates the functions of some other physical or
 virtual computer
\end_layout

\begin_layout Itemize

\emph on
interpretation
\emph default
: decoding of a program's L1 instructions by a program written in L0.
 The L1 program is run immediately, but is decoded before it is executed
\end_layout

\begin_layout Itemize

\emph on
translation
\emph default
: a program written in L1 is converted into an L0 program by a program written
 in L0 that's be designed for this purpose.
 The result can then be run directly on the computer's hardware
\end_layout

\begin_layout Section
Data Representation
\end_layout

\begin_layout Standard
Data in computer can be represented in binary, octal, decimal, or hexadecimal.
\end_layout

\begin_layout Subsection
Binary Integers
\end_layout

\begin_layout Standard
Binary integers, or bits, represent 
\emph on
on
\emph default
 and 
\emph on
off
\emph default
, or 
\emph on
true
\emph default
 and 
\emph on
false
\emph default
.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:binary-number"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows an example of a binary number with the most significant bit (MSB)
 and least significant bit (LSB) marked.
 Binary numbers can also be 
\emph on
signed
\emph default
 or 
\emph on
unsigned
\emph default
.
 An unsigned number can be only be positive while a signed number can be
 either positive or negative.
 A signed binary number that starts with a 
\begin_inset Formula $1$
\end_inset

 is considered to be negative while a signed binary number that begins with
 a 
\begin_inset Formula $0$
\end_inset

 is considered to be positive.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename binary_number.PNG
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Binary number with the most significant bit (MSB) and least significant
 bit (LSB) marked
\begin_inset CommandInset label
LatexCommand label
name "fig:binary-number"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
To calculate the number of bits a decimal number will occupy, you can use
 Equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:calculate-number-of-bits-for-binary-number"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Formula 
\begin{equation}
b=\text{ceiling}\left(\log_{2}\left(n\right)\right)\label{eq:calculate-number-of-bits-for-binary-number}
\end{equation}

\end_inset

where 
\begin_inset Formula $b$
\end_inset

 is the number of bits and 
\begin_inset Formula $n$
\end_inset

 is the number in base 10.
\end_layout

\begin_layout Subsubsection
Binary Addition
\end_layout

\begin_layout Standard
To add two binary numbers, start with the LSB of each number and add them.
 Next add the number to the left remembering to add the carry from the preceding
 calculation if there was one.
 Continue this process until all number of been add.
\end_layout

\begin_layout Subsubsection
Integer Storage Sizes
\end_layout

\begin_layout Standard
The basic storage unit for all x86 computers is the 
\emph on
byte
\emph default
, which is 8 bits.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:range-of-unsigned-integers"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the number of bits required for the different possible values for
 unsigned integers.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Storage size (in bits) and range for each type of unsigned integer
\begin_inset CommandInset label
LatexCommand label
name "tab:range-of-unsigned-integers"

\end_inset


\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Size (bits)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Range
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0\text{ to }2^{8}-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
word
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0\text{ to }2^{16}-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
doubleword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0\text{ to }2^{32}-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
quadword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0\text{ to }2^{64}-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
double quadword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
128
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0\text{ to }2^{128}-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Hexadecimal Integers
\end_layout

\begin_layout Standard
Similar to decimal, except 16 is used as the base.
 This means that the digits 0 to 9 are still used, but to represent numbers
 10 to 15 we use A to F, respectively.
\end_layout

\begin_layout Standard

\series bold
ASCII
\series default
 (American Standard Code Information Interchange) uses a unique 7-bit integer
 assigned to each character.
 The lower 7 bits of every byte is used to represent characters which allows
 proprietary character sets to be created using the remaining bit in each
 byte.
\end_layout

\begin_layout Standard

\series bold
ANSI Character Set
\series default
 
\end_layout

\begin_layout Subsection
Character Storage
\end_layout

\begin_layout Standard
A 
\emph on
character set
\emph default
 is used to represent characters by mapping characters to integers.
\end_layout

\begin_layout Subsection
Terms and Definitions
\end_layout

\begin_layout Itemize

\emph on
most significant bit (MSB)
\emph default
: the bit that is furthest to the left of a binary number
\end_layout

\begin_layout Itemize

\emph on
least significant bit (LSB)
\emph default
: the bit that is furthest to the right of a binary number
\end_layout

\begin_layout Itemize

\emph on
unsigned number
\emph default
: a number that can be only be positive
\end_layout

\begin_layout Itemize

\emph on
signed number
\emph default
: a number that can be either positive or negative
\end_layout

\begin_layout Itemize

\emph on
character set
\emph default
: a mapping of characters to integers
\end_layout

\begin_layout Section
Boolean Expressions
\end_layout

\begin_layout Standard
This a review of boolean values, operations, and of trutch tables from digital
 logic.
\end_layout

\end_body
\end_document
